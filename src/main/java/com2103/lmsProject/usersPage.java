package com2103.lmsProject;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;

import javax.swing.*;
import javax.swing.border.TitledBorder;
import javax.swing.plaf.FontUIResource;
import javax.swing.table.DefaultTableModel;
import javax.swing.text.StyleContext;
import java.awt.*;
import java.awt.event.FocusAdapter;
import java.awt.event.FocusEvent;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.util.HashMap;
import java.util.Locale;

public class usersPage extends JFrame {

    private JTable tbl_user;
    private JButton searchButton;
    private JTextField textField1;
    private JPanel panel1;
    private JComboBox rankCombo;
    private JTextField textField3;
    private JButton submitButton;
    private HashMap<String, Integer> rankList;
    private final Connection con;


    public usersPage(Connection con) {


        this.con = con;

        initRankCombo();

        searchButton.addActionListener(e -> {
            try {
                String search = textField1.getText();

                PreparedStatement ps = con.prepareStatement(
                        "select u.user_id, u.user_name, r.rank_name, r.borrow_period, r.daily_fine from " +
                                "borrow_rule r, " +
                                "users u " +
                                "where u.rule_id = r.rule_id and " +
                                "u.user_id LIKE ?");
                ps.setString(1, "%" + search + "%");

                ResultSet rs = ps.executeQuery();
                ResultSetMetaData rsmd = rs.getMetaData();

                tbl_user.setModel(new DefaultTableModel());
                DefaultTableModel model = (DefaultTableModel) tbl_user.getModel();

                int cols = rsmd.getColumnCount();
                String[] colName = new String[cols];
                for (int i = 0; i < cols; i++)
                    colName[i] = rsmd.getColumnLabel(i + 1);
                model.setColumnIdentifiers(colName);

                while (rs.next()) {
                    String userId = rs.getString(1);
                    String userName = rs.getString(2);
                    String ruleId = rs.getString(3);
                    int borrowPeriod = rs.getInt(4);
                    float dailyFine = rs.getFloat(5);
                    String[] row = {userId, userName, ruleId, String.valueOf(borrowPeriod), String.format("%.2f", dailyFine)};
                    model.addRow(row);
                }


            } catch (Exception exception) {
                System.out.println("Error: " + exception.getMessage());
            }
        });

        submitButton.addActionListener(e -> {
            try {
                String studId = textField3.getText();
                int rank_id = rankList.get(rankCombo.getSelectedItem());
                System.out.println(studId);
                System.out.println(rank_id + 1);
                PreparedStatement ps = con.prepareStatement("UPDATE users SET rule_id = ? WHERE user_id = ?;");
                ps.setInt(1, rank_id);
                ps.setString(2, studId);
                ps.execute();
            } catch (Exception exception) {
                System.out.println("Error: " + exception.getMessage());
            }
        });
        rankCombo.addFocusListener(new FocusAdapter() {
            @Override
            public void focusGained(FocusEvent e) {
                try {
                    PreparedStatement ps = con.prepareStatement("select * from borrow_rule");
                    ResultSet rs = ps.executeQuery();

                    rankList = new HashMap<>();

                    while (rs.next()) {
                        rankList.put(rs.getString(2), rs.getInt(1));
                    }
                    rankCombo.setModel(new DefaultComboBoxModel(rankList.keySet().toArray()));
                } catch (Exception exception) {
                    System.out.println("Error: " + exception.getMessage());
                }
                super.focusGained(e);
            }
        });
    }

    private void initRankCombo() {
        try {
            PreparedStatement ps = con.prepareStatement("select * from borrow_rule");
            ResultSet rs = ps.executeQuery();

            rankList = new HashMap<>();

            while (rs.next()) {
                rankList.put(rs.getString(2), rs.getInt(1));
            }
            rankCombo.setModel(new DefaultComboBoxModel(rankList.keySet().toArray()));
        } catch (Exception exception) {
            System.out.println("Error: " + exception.getMessage());
        }
    }


    public JPanel getter() {
        return this.panel1;
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(4, 3, new Insets(0, 0, 0, 0), -1, -1));
        final JLabel label1 = new JLabel();
        Font label1Font = this.$$$getFont$$$(null, -1, 20, label1.getFont());
        if (label1Font != null) label1.setFont(label1Font);
        label1.setText("Enter user's ID");
        panel1.add(label1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        searchButton = new JButton();
        Font searchButtonFont = this.$$$getFont$$$(null, -1, 20, searchButton.getFont());
        if (searchButtonFont != null) searchButton.setFont(searchButtonFont);
        searchButton.setText("Search / Show All");
        panel1.add(searchButton, new GridConstraints(0, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        textField1 = new JTextField();
        Font textField1Font = this.$$$getFont$$$(null, -1, 20, textField1.getFont());
        if (textField1Font != null) textField1.setFont(textField1Font);
        textField1.setText("");
        panel1.add(textField1, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        final JScrollPane scrollPane1 = new JScrollPane();
        Font scrollPane1Font = this.$$$getFont$$$(null, -1, 18, scrollPane1.getFont());
        if (scrollPane1Font != null) scrollPane1.setFont(scrollPane1Font);
        panel1.add(scrollPane1, new GridConstraints(1, 0, 1, 3, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        tbl_user = new JTable();
        tbl_user.setAutoCreateRowSorter(true);
        Font tbl_userFont = this.$$$getFont$$$(null, -1, 18, tbl_user.getFont());
        if (tbl_userFont != null) tbl_user.setFont(tbl_userFont);
        scrollPane1.setViewportView(tbl_user);
        final JPanel panel2 = new JPanel();
        panel2.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        panel1.add(panel2, new GridConstraints(3, 0, 1, 3, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        final JPanel panel3 = new JPanel();
        panel3.setLayout(new GridLayoutManager(3, 2, new Insets(0, 0, 0, 0), -1, -1));
        panel3.setEnabled(true);
        Font panel3Font = this.$$$getFont$$$(null, -1, 20, panel3.getFont());
        if (panel3Font != null) panel3.setFont(panel3Font);
        panel2.add(panel3, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        panel3.setBorder(BorderFactory.createTitledBorder(null, "", TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, null));
        final JLabel label2 = new JLabel();
        Font label2Font = this.$$$getFont$$$(null, -1, 20, label2.getFont());
        if (label2Font != null) label2.setFont(label2Font);
        label2.setText("User ID");
        panel3.add(label2, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label3 = new JLabel();
        Font label3Font = this.$$$getFont$$$(null, -1, 20, label3.getFont());
        if (label3Font != null) label3.setFont(label3Font);
        label3.setText("Rank");
        panel3.add(label3, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        rankCombo = new JComboBox();
        Font rankComboFont = this.$$$getFont$$$(null, -1, 18, rankCombo.getFont());
        if (rankComboFont != null) rankCombo.setFont(rankComboFont);
        final DefaultComboBoxModel defaultComboBoxModel1 = new DefaultComboBoxModel();
        rankCombo.setModel(defaultComboBoxModel1);
        panel3.add(rankCombo, new GridConstraints(1, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        submitButton = new JButton();
        Font submitButtonFont = this.$$$getFont$$$(null, -1, 20, submitButton.getFont());
        if (submitButtonFont != null) submitButton.setFont(submitButtonFont);
        submitButton.setText("Submit");
        panel3.add(submitButton, new GridConstraints(2, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        textField3 = new JTextField();
        Font textField3Font = this.$$$getFont$$$(null, -1, 18, textField3.getFont());
        if (textField3Font != null) textField3.setFont(textField3Font);
        textField3.setText("");
        panel3.add(textField3, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        final JLabel label4 = new JLabel();
        Font label4Font = this.$$$getFont$$$(null, -1, 20, label4.getFont());
        if (label4Font != null) label4.setFont(label4Font);
        label4.setText("Edit User Rank");
        panel1.add(label4, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
        if (currentFont == null) return null;
        String resultName;
        if (fontName == null) {
            resultName = currentFont.getName();
        } else {
            Font testFont = new Font(fontName, Font.PLAIN, 10);
            if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
                resultName = fontName;
            } else {
                resultName = currentFont.getName();
            }
        }
        Font font = new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
        boolean isMac = System.getProperty("os.name", "").toLowerCase(Locale.ENGLISH).startsWith("mac");
        Font fontWithFallback = isMac ? new Font(font.getFamily(), font.getStyle(), font.getSize()) : new StyleContext().getFont(font.getFamily(), font.getStyle(), font.getSize());
        return fontWithFallback instanceof FontUIResource ? fontWithFallback : new FontUIResource(fontWithFallback);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return panel1;
    }

}
